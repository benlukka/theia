/* tslint:disable */
/* eslint-disable */
/**
 * Layout Dashboard API
 * API for managing dynamic dashboard layouts and components
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LayoutUpdate,
} from '../models';
import {
    LayoutUpdateFromJSON,
    LayoutUpdateToJSON,
} from '../models';

export interface UpdateRequest {
    layoutUpdate: LayoutUpdate;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Get layout values
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getLayoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayoutUpdate>>;

    /**
     * Get layout values
     */
    getLayout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayoutUpdate>;

    /**
     * 
     * @summary 
     * @param {LayoutUpdate} layoutUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * 
     */
    update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Get layout values
     */
    async getLayoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LayoutUpdate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/layout-update`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LayoutUpdateFromJSON(jsonValue));
    }

    /**
     * Get layout values
     */
    async getLayout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LayoutUpdate> {
        const response = await this.getLayoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.layoutUpdate === null || requestParameters.layoutUpdate === undefined) {
            throw new runtime.RequiredError('layoutUpdate','Required parameter requestParameters.layoutUpdate was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LayoutUpdateToJSON(requestParameters.layoutUpdate),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
