buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}
plugins {
    id 'org.jetbrains.kotlin.jvm' version '2.1.10'
    id 'org.openapi.generator' version '6.6.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id "io.sentry.jvm.gradle" version "5.6.0"
    id "de.undercouch.download" version "5.4.0"

}
tasks.named("sentryCollectSourcesJava") {
    mustRunAfter("compileKotlin", "openApiGenerate")
}
group = 'com.benlukka.theia'
version = '1.0-SNAPSHOT'

def http4kVersion = "5.47.0.0"
repositories {
    mavenCentral()
}
sentry {
    includeSourceContext = true
    org = "benlukka"
    projectName = "theia"
    authToken = System.getenv("SENTRY_AUTH_TOKEN")
}
dependencies {
    testImplementation('org.jetbrains.kotlin:kotlin-test')
    implementation("org.http4k:http4k-client-okhttp:${http4kVersion}")
    implementation("org.http4k:http4k-client-fuel:${http4kVersion}")
    implementation("org.http4k:http4k-client-websocket:${http4kVersion}")
    implementation("org.http4k:http4k-core:${http4kVersion}")
    implementation("org.http4k:http4k-format-jackson:${http4kVersion}")
    implementation("org.http4k:http4k-contract:${http4kVersion}")
    implementation("org.http4k:http4k-multipart:${http4kVersion}")
    implementation("org.http4k:http4k-server-undertow:${http4kVersion}")
    implementation("org.http4k:http4k-template-handlebars:${http4kVersion}")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0")
    implementation("ch.qos.logback:logback-classic:1.5.18")
    implementation("dev.langchain4j:langchain4j-ollama:1.0.0-beta5")
    implementation("org.http4k:http4k-server-jetty:${http4kVersion}")
    implementation("org.http4k:http4k-client-websocket:${http4kVersion}")
    implementation("org.http4k:http4k-opentelemetry:${http4kVersion}")
    implementation("io.sentry:sentry:8.11.1")
    implementation("io.sentry:sentry-logback:8.11.1")
    implementation("org.jsoup:jsoup:1.20.1")
}
configurations.named('default') {
    canBeResolved = true
}
tasks.register('cleanGenerated', Delete) {
    delete "$projectDir/frontend/src/generated"
}

tasks.register('downloadOpenApiSpec', Download) {
    src 'http://localhost:8080/openapi.json'
    dest file("$projectDir/src/main/resources/openapi.json")
    overwrite true
}

// Configure openApiGenerate *task*, not extension
tasks.named("openApiGenerate") {
}

// Configure openApiGenerate *extension*
openApiGenerate {
    generatorName = "typescript-fetch"
    inputSpec = "$projectDir/src/main/resources/spec.json"
    outputDir = "$projectDir/frontend/src/generated"
    validateSpec.set(false)

    typeMappings = [
            DateTime: "string",
            Date: "string"
    ]

    configOptions = [
            supportsES6             : "true",
            enumPropertyNaming      : "UPPERCASE",
            modelPropertyNaming     : "original",
            useSingleRequestParameter: "true",
            withInterfaces          : "true",
            includeUnreferencedSchemas : "true"
    ]
}
class TeeOutputStream extends OutputStream {
    private final OutputStream out1
    private final OutputStream out2

    TeeOutputStream(OutputStream out1, OutputStream out2) {
        this.out1 = out1
        this.out2 = out2
    }

    @Override
    void write(int b) throws IOException {
        out1.write(b)
        out2.write(b)
    }

    @Override
    void write(byte[] b) throws IOException {
        out1.write(b)
        out2.write(b)
    }

    @Override
    void write(byte[] b, int off, int len) throws IOException {
        out1.write(b, off, len)
        out2.write(b, off, len)
    }

    @Override
    void flush() throws IOException {
        out1.flush()
        out2.flush()
    }

    @Override
    void close() throws IOException {
        try {
            out1.close()
        } finally {
            out2.close()
        }
    }
}

tasks.register('run') {
    dependsOn(build)
    group = 'application'
    description = 'Runs the server after building the frontend'
    // Make this task depend on the frontend build task
    dependsOn project(':frontend').tasks.named('yarnStart')
    def sentryAgentJar = file('sentry-opentelemetry-agent-8.12.0.jar')
    if (!sentryAgentJar.exists()) {
        new URL('https://repo1.maven.org/maven2/io/sentry/sentry-opentelemetry-agent/8.12.0/sentry-opentelemetry-agent-8.12.0.jar')
                .withInputStream { i -> sentryAgentJar.withOutputStream { it << i } }
    }
    doLast {
        def logsDir = file('logs')
        if (!logsDir.exists()) logsDir.mkdirs()

        def buildOutputDir = file("${buildDir}/output")
        if (!buildOutputDir.exists()) buildOutputDir.mkdirs()

        def configFile = new File(buildOutputDir, "run-config.txt")
        def configWriter = new PrintWriter(new FileWriter(configFile))

        def timestamp = new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date())
        def frontendLogFile = new File(logsDir, "frontend-${timestamp}.log")
        def backendLogFile = new File(logsDir, "backend-${timestamp}.log")

        // Dump configuration info
        configWriter.println("Run Configuration at ${timestamp}")
        configWriter.println("Backend command: java -cp ${sourceSets.main.runtimeClasspath.asPath} com.benlukka.theia.MainKt")
        configWriter.println("Frontend log: ${frontendLogFile}")
        configWriter.println("Backend log: ${backendLogFile}")
        configWriter.flush()
        configWriter.close()

        println "Starting backend process..."
        def backend = new ProcessBuilder([
                'java',
                '-javaagent:' + sentryAgentJar.absolutePath,
                '-cp',
                sourceSets.main.runtimeClasspath.asPath,
                'com.benlukka.theia.MainKt'
        ])
                .environment().put('SENTRY_PROPERTIES_FILE', 'src/main/resources/sentry.properties')

        backend.redirectErrorStream(true)
        backend = backend.start()
        // Wait a few seconds for backend to start
        sleep(4000)

        println "Starting frontend process..."
        // Use the existing yarnStart task
        def frontendProcess = null
        def yarnStartEnv = [PORT: '3000']

        // Set up streams for frontend logging
        def frontendOutStream = new FileOutputStream(frontendLogFile)
        def frontendLogStream = new TeeOutputStream(System.out, frontendOutStream)

        // Start the process based on OS
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            def processBuilder = new ProcessBuilder(
                    "cmd", "/c", "cd", project(':frontend').projectDir.absolutePath, "&&",
                    "set", "PORT=3000", "&&",
                    "yarn", "start"
            )
            processBuilder.redirectErrorStream(true)
            frontendProcess = processBuilder.start()
        } else {
            def processBuilder = new ProcessBuilder(
                    "sh", "-c", "cd ${project(':frontend').projectDir.absolutePath} && PORT=3000 yarn start"
            )
            processBuilder.redirectErrorStream(true)
            frontendProcess = processBuilder.start()
        }

        // Set up threads to handle process output
        def backendOutputStream = backend.getInputStream()
        def frontendOutputStream = frontendProcess.getInputStream()

        Thread backendLogThread = new Thread({
            def backendWriter = new PrintWriter(new FileWriter(backendLogFile, true))
            try {
                def reader = new BufferedReader(new InputStreamReader(backendOutputStream))
                String line
                while ((line = reader.readLine()) != null) {
                    println "[BACKEND] ${line}"
                    backendWriter.println(line)
                    backendWriter.flush()
                }
            } finally {
                backendWriter.close()
            }
        })

        Thread frontendLogThread = new Thread({
            def frontendWriter = new PrintWriter(new FileWriter(frontendLogFile, true))
            try {
                def reader = new BufferedReader(new InputStreamReader(frontendOutputStream))
                String line
                while ((line = reader.readLine()) != null) {
                    println "[FRONTEND] ${line}"
                    frontendWriter.println(line)
                    frontendWriter.flush()
                }
            } finally {
                frontendWriter.close()
            }
        })

        backendLogThread.start()
        frontendLogThread.start()

        // Add shutdown hook to handle CTRL+C
        def shutdownThread = new Thread({
            println "Shutting down processes..."

            // Kill the frontend process
            if (frontendProcess != null && frontendProcess.isAlive()) {
                if (System.getProperty("os.name").toLowerCase().contains("windows")) {
                    ["cmd", "/c", "taskkill", "/F", "/T", "/PID", "${frontendProcess.pid()}"].execute()
                } else {
                    ["pkill", "-P", "${frontendProcess.pid()}"].execute()
                    frontendProcess.destroy()
                }
            }

            // Kill the backend process
            if (backend != null && backend.isAlive()) {
                backend.destroy()
            }

            // Append shutdown info to config
            configWriter = new PrintWriter(new FileWriter(configFile, true))
            configWriter.println("\nShutdown at ${new java.text.SimpleDateFormat("yyyy-MM-dd_HH-mm-ss").format(new Date())}")
            configWriter.close()

            println "Processes terminated."
        })

        Runtime.runtime.addShutdownHook(shutdownThread)

        // Keep the main thread alive while the processes are running
        while ((backend != null && backend.isAlive()) ||
                (frontendProcess != null && frontendProcess.isAlive())) {
            try {
                Thread.sleep(1000)
            } catch (InterruptedException e) {
                // Handle interruption
                shutdownThread.run()
                break
            }
        }

        // Make sure to join log threads
        backendLogThread.join()
        frontendLogThread.join()
    }
}
tasks.register('dev') {
    dependsOn(':frontend:yarnStart')
    group = 'application'
    description = 'Runs the server in development mode'

    doLast {
        javaexec {
            mainClass = 'com.benlukka.theia.MainKt'
            classpath = sourceSets.main.runtimeClasspath
            jvmArgs = ['-Ddev=true']
        }
    }
}


test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(23)
}